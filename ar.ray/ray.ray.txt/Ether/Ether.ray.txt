+def Node < Entity
end

class Item
  // The known locations this item is referenced. This could be properties of an object, or a location in a World.
  location: Ray = Ray(this)
  dynamically
    sub = this[`property: *`]

    loc = Ray(sub)
    location.copy().push<edge: .value = property>(loc)

    // Speculatively merge a detected loop in the location, if not found, we recursively describe it: A.B.A.B.A.B...
    speculative if<assume: true> !(<-location){== sub}.push_front(loc)
      sub.location &= loc
  end
end
class Entity < Item

end

class World
end

def Instance
end

def Player
  // The known instances currently running this player.
  instance: Instance

  +def location
    // When filled, this indicates that the provided instance is rendering this location.
    primary: instance?
    dynamically assert @{.primary == primary}.count == 1 if primary // Only one primary location per instance.
  end
end
