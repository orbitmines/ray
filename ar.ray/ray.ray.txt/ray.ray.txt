// Defined by context:
//  external = { do, goto, *, Node { `*`, `*`= } } // TODO: External should nestedly check local.definer
//  `arbitrary structure`=
//  def def(): Constructor
//  local
//  caller (= local) TODO Or is it nil
//  TODO Should be the constructor that calls into the program:
//  constructor (= local) = { name = "<text file name or nil>", definer (= local) } TODO Or is is nil?
//  definer (= local) TODO Or is it nil

def * = external // TODO any type Might not need to be externally defined. self-referential hypergraph-like structure
// TODO: Type of program is the same signature as Program and <T> extends Program -> Rename Program to Function? Program more general than function: it can be anywhere in some state.
def do<T < Program>(program: T) => T = external
def goto(location: Program, predicate?: Expression) = external //TODO, Hijacks control-flow (Maybe if predicate is provided), which needs to be an option for functions, yielding control to a parameterless "program" -> or one where the parameters are already filled instead of goto the way of doing it.
def [args: Array<T>] => Array<T> = external

global = local

//TODO def
//TODO Array
//TODO 0..9.reduce(|) / "0".."9".reduce(|)
//TODO Decimal -> Binary / Binary -> Decimal & Decimal.String -> Binary

//

def void end

def namespace
  def `name = *`(definition: () => *)
    definer[name] = local
    name

    definition(local = local)

    return local
  end
end

def class
  def `name = *`(definition: (Args = *) => *)
    definer[name] = definition
    definition.name = name

    def (...args: Args)
      static = definition
      this = local

      definition(local = this, ...args)

      return this
    end

    return definition
  end
end

class Node
  def `*`=(value) = external //TODO These dont need to be external
  def `*` = external

  def [] = Array<this>
  def ? = Some(this) // TODO Perhaps None if None, or void or ?
end

def Iterable
  for callback: (Args = *) => *
    //TODO
  end
end
def AbstractDirectionality < Iterable
end

class if expression: Expression, yes?: () => *
  def (else?: () => *)
    goto exec, expression

    return else?()
   exec:
    return yes?()
  end

  // "then" is defined, so we can have an inline block like: "if expression then yes else no"
  def then yes: () => *
    this.yes = yes
    return this
  end

  def elsif expression: Expression, elsif: () => *
    def (else?: () => *) = this.else
      if expression
        return elsif()
      else
        return else?()
      end
    end

    def elsif = this.elsif<this = local>
    def else = this.else<this = local>

    return local
  end

  def else else: () => *
    return this<else = else>
  end

  return this
end

def while expression: Expression, program: () => void
  return do
   check:
    goto done if expression

    program(break = goto done)
    goto check
   done:
    return
  end
end

class Expression
  def while program = global.while(this, program)
end

// A function is a Node for which "(*) => *" is defined.
def Function<(Args = *) => Return = *> = Node<(Args) => Return>

  // do end.while() is a do-while loop. TODO Could also only define it on "() => void"
  def while expression: Expression
    return do ...args
     exec:
      this(break = goto done, ...args)

      goto exec if expression
    end
  end
end

def Option<T> = Some(T) | None
{ Some, None } = Option

def Two = Array<length == 2>
class boolean = false = Two.first~ | true = Two.last~ do
  // TODO Verify that these are correct work for all cases.

  not =
    def !
    or this !& this
    or this !| this
    or this x| true
    or this x!| false
    end

  and =
    def & b: boolean
    or !(this !& b)
    or !(!this | !b)
    end

  or =
    def | b: boolean
    or !(this !| b)
    or !(!this & !b)
    end

  nand =
    def !& b: boolean
    or !(this & b)

    // An implementation using goto"s so that a conditional goto is the only (necessary) primitive.
    or
      goto 2nd_check, a
      goto 1
     2nd_check:
      goto 0, b
   1: return true
   0: return false
    end

  nor =
    def !| b: boolean
    or !(this | b)
    end

  xor =
    def x| b: boolean
    or !(this x!| b)
    or (this & !b) | (!this & b)
    end

  xnor =
    def x!| b: boolean
    or !(this x| b)
    end
end
{ false, true } = boolean


class Binary = boolean[]
  static def String = Array<"0" | "1">
end
class Decimal = sign = "-"?, integer = Decimal.Positive
  static class Positive = Array<0..9.reduce(|)>
    static def String = Array<"0".."9".reduce(|)>

    def `fraction = Decimal.Positive.String` => Decimal.Real.Positive = sign, integer, ".", fraction
  end

  static class Real = sign = "-"?, Decimal.Real.Positive // TODO: should be possible to define out of order, and access integer/fraction methods ; It should be seen as a partial "extends"
    static class Positive = integer = Decimal.Positive, ".", fraction = Decimal.Positive
    end
  end
end

def `digits = Decimal.Positive.String` => Decimal
  // TODO: First wait on a definite way of defining the graphs.

  def mapping
    0 = |,_,_,_,_,_,_,_,_
    1 = -,|,-,-,-,-,-,-,-
    // TODO Define the graph of a number, without having access to a number to construct it.
  end
end
def u`length = Decimal.Positive.String` = Binary<.length == length>
  // TODO Number arithmetic
end
def i`length = Decimal.Positive.String` = Binary<.length == length>
  // TODO Number arithmetic
end

def number
  // TODO Generic number interface which others should extend, things like >/< should come from another interface which is "NumberLine"
  // TODO Infinity is a looped integer. -infinity a .reverse"d loop. .reverse needs to be preserved for them to be differentiated?
  // TODO: external defines that number > number is done by some other operator, not looking through successors/predecessors.
end

def string
  // TODO How do other languages implement String?
end
def char
  // TODO Proof it"s a valid codepoint like Lean? How"s that implemented
end

def Range
  // TODO Range should be bounds which are Rays (already have the graph equipped)
  // TODO Infinity, is just the terminal reference (which doesn"t exist on the line) How to differentiate initial/terminal infinity.
end